package com.amazonaws.lambda.demo;


import java.text.SimpleDateFormat;
import java.util.TimeZone;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.spec.PutItemSpec;
import com.amazonaws.services.dynamodbv2.model.ConditionalCheckFailedException;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;


public class RecordingPetDevice2Handler implements RequestHandler<Document, String> {
	private	DynamoDB	dynamoDb;

	private	String	PET_ENVIRONMENT_TABLE	= "Pet_Environment";
	private	String	PET_QUANTITY_TABLE	= "Pet_Quantity";
	private	String	PET_ISSUE_TABLE	= "Pet_Issue";
	private	String	PET_FEED_TABLE	= "Pet_Feed";
	
	@Override
	public	String	handleRequest(Document	input,	Context	context) {
					this.initDynamoDbClient();
					context.getLogger().log("Input:	" +	input);

					return persistData(input, context);
	}
	
	private	String	persistData(Document document, Context context) throws ConditionalCheckFailedException	{
					//	Epoch	Conversion	Code:	https://www.epochconverter.com/
					SimpleDateFormat	sdf	= new SimpleDateFormat ( "yyyy-MM-dd	HH:mm:ss");
					sdf.setTimeZone(TimeZone.getTimeZone("Asia/Seoul"));
					String	timeString	=	sdf.format(new java.util.Date (document.timestamp*1000));
					
					float _temp = Float.parseFloat(document.current.state.reported.temperature);
					float _humi = Float.parseFloat(document.current.state.reported.humidity);
					float _cm = Float.parseFloat(document.current.state.reported.humidity);
					
					if (document.current.state.reported.temperature.equals(
									document.previous.state.reported.temperature) &&
													document.current.state.reported.humidity.equals(
													document.previous.state.reported.humidity)) {		
					}
					else {
						this.dynamoDb.getTable(PET_ENVIRONMENT_TABLE)
						.putItem(new PutItemSpec().withItem(new Item()
														.withPrimaryKey("time",	document.timestamp)
														.withString("temperature",	document.current.state.reported.temperature)
														.withString("humidity",	document.current.state.reported.humidity)
														.withString("timestamp",timeString)))
						.toString();
						
						// 온도가 30도 이상이면 이슈 테이블에 항목 추가
						if(_temp > 30) {
							this.dynamoDb.getTable(PET_ISSUE_TABLE)
							.putItem(new PutItemSpec().withItem(new Item()
															.withPrimaryKey("time",	document.timestamp)
															.withString("issue",	"온도 이상")
															.withString("timestamp",timeString)))
							.toString();
						}
						
						// 습도가 60 이상이면 이슈 테이블에 항목 추가
						if(_humi > 60) {
							this.dynamoDb.getTable(PET_ISSUE_TABLE)
							.putItem(new PutItemSpec().withItem(new Item()
															.withPrimaryKey("time",	document.timestamp)
															.withString("issue",	"습도 이상")
															.withString("timestamp",timeString)))
							.toString();
						}
					}
					
					if (document.current.state.reported.cm.equals(
									document.previous.state.reported.cm) &&
													document.current.state.reported.LED.equals(
													document.previous.state.reported.LED)) {					
					}
					else {
						this.dynamoDb.getTable(PET_QUANTITY_TABLE)
						.putItem(new PutItemSpec().withItem(new Item()
														.withPrimaryKey("time",	document.timestamp)
														.withString("cm",	document.current.state.reported.cm)
														.withString("LED",	document.current.state.reported.LED)
														.withString("timestamp",timeString)))
						.toString();
						
						// 잔량 거리가 5 이상이면 이슈 테이블에 항목 추가
						if(_cm >= 10) {
							this.dynamoDb.getTable(PET_ISSUE_TABLE)
							.putItem(new PutItemSpec().withItem(new Item()
															.withPrimaryKey("time",	document.timestamp)
															.withString("issue",	"잔량 부족")
															.withString("timestamp",timeString)))
							.toString();
						}
						else if(_cm >= 5) {
							this.dynamoDb.getTable(PET_ISSUE_TABLE)
							.putItem(new PutItemSpec().withItem(new Item()
															.withPrimaryKey("time",	document.timestamp)
															.withString("issue",	"잔량 경고")
															.withString("timestamp",timeString)))
							.toString();
						}
					}
					
					// current > state > desired("ON"), reported("OFF") 값 다르면
					if (document.current.state.desired.MOTOR.equals("ON") && document.current.state.reported.MOTOR.equals("OFF")) {
						
						this.dynamoDb.getTable(PET_FEED_TABLE)
						.putItem(new PutItemSpec().withItem(new Item()
														.withPrimaryKey("time",	document.timestamp)
														.withString("feed",	"배식")
														.withString("timestamp",timeString)))
						.toString();
					}
					
					return null;
	}
	
	private void initDynamoDbClient() {
					AmazonDynamoDB	client	=	AmazonDynamoDBClientBuilder.standard().
																													withRegion("ap-northeast-2").build();
					this.dynamoDb	= new DynamoDB(client);
	}
}
/**
*	AWS	IoT은(는)	섀도우 업데이트가 성공적으로 완료될 때마다	/update/documents	주제에 다음 상태문서를 게시합니다
*	JSON	형식의 상태문서는	2개의 기본 노드를 포함합니다.	previous	및	current.
*	previous	노드에는 업데이트가 수행되기 전의 전체 섀도우 문서의 내용이 포함되고,
*	current에는 업데이트가 성공적으로 적용된 후의 전체 섀도우 문서가 포함됩니다.
*	섀도우가 처음 업데이트(생성)되면	previous	노드에는	null이 포함됩니다.
*
*	timestamp는 상태문서가 생성된 시간 정보이고,
*	device는 상태문서에 포함된 값은 아니고,	Iot규칙을 통해서	Lambda함수로 전달된 값이다.
*	이 값을 해당 규칙과 관련된 사물이름을 나타낸다.
*/

class Document {				// input 넘어올 때, 4가지 속성을 가진 객체가 넘어온다고 이해하면 됨
	public	Thing	previous;							
	public	Thing	current;
	public long	timestamp;
	public	String	device;		//	AWS	IoT에 등록된 사물 이름
}

class Thing {
	public	State state	= new State();
	public long	timestamp;	
	public String clientToken;	
	
	public class State {
		public Tag reported = new Tag();
		public Tag desired = new Tag();
		
		public class Tag {
			public String temperature;
			public String humidity;
			public String cm;
			public String LED;
			public String MOTOR;
		}
	}
}

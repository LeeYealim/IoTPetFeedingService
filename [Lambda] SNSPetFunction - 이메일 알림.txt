package com.amazonaws.lambda.demo;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.sns.AmazonSNS;
import com.amazonaws.services.sns.AmazonSNSClientBuilder;
import com.amazonaws.services.sns.model.PublishRequest;
import com.amazonaws.services.sns.model.PublishResult;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

public class SNSPetHandler implements RequestHandler<Object, String> {

    @Override
    public String handleRequest(Object input, Context context) {
    	context.getLogger().log("Input: " + input);
    	
    	String json = ""+input;
    	JsonParser parser = new JsonParser();
    	JsonElement element = parser.parse(json);
    	JsonElement state = element.getAsJsonObject().get("state");
    	JsonElement reported = state.getAsJsonObject().get("reported");
    	
    	String temperature = reported.getAsJsonObject().get("temperature").getAsString();
    	String humidity = reported.getAsJsonObject().get("humidity").getAsString();
    	String quantity = reported.getAsJsonObject().get("cm").getAsString();
    	
    	double temp = Double.valueOf(temperature);
    	double humi = Double.valueOf(humidity);
    	double cm = Double.valueOf(quantity);
    	
    	// 엑세스키, 시크릿엑세스키, 주제ARN 설정
    	final String AccessKey="AKIA3COUCQVXGELHABUZ";
    	final String SecretKey="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";
    	final String topicArn="arn:aws:sns:ap-northeast-2:761190843758:PetTopic";
    	
    	BasicAWSCredentials awsCreds = new BasicAWSCredentials(AccessKey, SecretKey);
    	AmazonSNS sns = AmazonSNSClientBuilder.standard()
    	.withRegion(Regions.AP_NORTHEAST_2)
    	.withCredentials( new AWSStaticCredentialsProvider(awsCreds) )
    	.build();
    	
    	String msg = "";
    	String subject = "Pet Critical Warning";
    	
    	boolean mode = false;	// 주제 메세지 게시 여부
    	
    	if (temp > 30.0) {
    		mode = true;
    		msg += "*온도 이상 알림*\n" + "디바이스에서 기준값 이상의 온도가 측정되었습니다 : " + temp + "C\n\n";
    	}
    	if (humi > 60.0) {
    		mode = true;
    		msg += "*온도 이상 알림*\n" + "디바이스에서 기준값 이상의 습도가 측정되었습니다 : " + humi + "%\n\n";
    	}
    	if (cm >= 10.0) {
    		mode = true;
    		msg += "*잔량 경고 알림*\n" + "디바이스에서 기준값 이하의 잔량이 측정되었습니다 : " + cm + "cm\n\n";
    	}
    	
    	
    	// mode == true이면, SNS 메세지 게시
    	if(mode) {
    		PublishRequest publishRequest = new PublishRequest(topicArn, msg, subject);
    		PublishResult publishResponse = sns.publish(publishRequest);
    	}
    	
    	return subject+ "temperature=" + temperature + ", humidity=" + humidity + ", cm=" + cm + "!";
    }

}
